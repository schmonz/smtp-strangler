#!/usr/bin/env python

import os
import sys
import select

def die(message = ''):
    sys.stderr.write(message + '\n')
    sys.exit(1)

def die_usage():
    die('usage: {:s} prog [ arg ... ]'.format(sys.argv[0]))

def read_and_process_until_either_end_closes(from_client, to_server,
                                             from_server, to_client):
    buffer_size = 77

    someone_closed = 0
    while not someone_closed:
        (readable, writable, exceptional) = select.select([from_client, from_server], [], [])

        for fd in readable:
            if fd == from_client:
                more = os.read(fd, buffer_size)
                if not more:
                    someone_closed += 1
                    break
                os.write(to_server, more)

            if fd == from_server:
                more = os.read(fd, buffer_size)
                if not more:
                    someone_closed += 1
                    break
                os.write(to_client, more)
        else:
            break

def teardown_and_exit(child, from_server, to_server):
    os.close(from_server)
    os.close(to_server)
    (pid, exitcode, resources) = os.wait4(child, 0)
    sys.exit(exitcode)

def be_parent(from_client, to_client,
              from_proxy, to_proxy,
              from_server, to_server,
              child):
    setup_proxy(from_proxy, to_proxy)
    read_and_process_until_either_end_closes(from_client, to_server, from_server, to_client)
    teardown_and_exit(child, from_server, to_server)

def use_as_stdin(fd):
    sys.stdin = os.fdopen(fd, 'rb')

def use_as_stdout(fd):
    sys.stdout = os.fdopen(fd, 'wb') # XXX 'ab'?

def setup_server(from_proxy, to_server,
                 from_server, to_proxy):
    os.close(from_server)
    os.close(to_server)
    use_as_stdin(from_proxy)
    use_as_stdout(to_proxy)

def exec_server_and_never_return(args):
    os.execvp(args[0], args)
    die

def be_child(from_proxy, to_proxy,
             from_server, to_server,
             args):
    setup_server(from_proxy, to_server, from_server, to_proxy)
    exec_server_and_never_return(args)

def setup_proxy(from_proxy, to_proxy):
    os.close(from_proxy)
    os.close(to_proxy)

def main(args):
    if (len(args) == 0):
        die_usage()

    (from_client, to_client) = (sys.stdin, sys.stdout)
    (from_proxy, to_server) = os.pipe()
    (from_server, to_proxy) = os.pipe()

    child = os.fork()
    if (child):
        be_parent(from_client, to_client,
                  from_proxy, to_proxy,
                  from_server, to_server,
                  child)
    else:
        be_child(from_proxy, to_proxy,
                 from_server, to_server,
                 args)

if __name__ == '__main__':
    main(sys.argv[1:])

# XXX
# 1. Catch up to fixsmtpio_*.c
# 2. Check on 2.7 and 3.6
# 3. Test-drive from scratch (with both Pythons) for a git-crawl demo
